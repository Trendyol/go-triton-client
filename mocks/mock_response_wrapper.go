// Code generated by MockGen. DO NOT EDIT.
// Source: base/response_wrapper.go
//
// Generated by this command:
//
//	mockgen -source=base/response_wrapper.go -destination=mocks/mock_response_wrapper.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockResponseWrapper is a mock of ResponseWrapper interface.
type MockResponseWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockResponseWrapperMockRecorder
	isgomock struct{}
}

// MockResponseWrapperMockRecorder is the mock recorder for MockResponseWrapper.
type MockResponseWrapperMockRecorder struct {
	mock *MockResponseWrapper
}

// NewMockResponseWrapper creates a new mock instance.
func NewMockResponseWrapper(ctrl *gomock.Controller) *MockResponseWrapper {
	mock := &MockResponseWrapper{ctrl: ctrl}
	mock.recorder = &MockResponseWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponseWrapper) EXPECT() *MockResponseWrapperMockRecorder {
	return m.recorder
}

// GetBody mocks base method.
func (m *MockResponseWrapper) GetBody() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBody indicates an expected call of GetBody.
func (mr *MockResponseWrapperMockRecorder) GetBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockResponseWrapper)(nil).GetBody))
}

// GetHeader mocks base method.
func (m *MockResponseWrapper) GetHeader(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHeader indicates an expected call of GetHeader.
func (mr *MockResponseWrapperMockRecorder) GetHeader(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockResponseWrapper)(nil).GetHeader), key)
}

// GetRawOutputContents mocks base method.
func (m *MockResponseWrapper) GetRawOutputContents() [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawOutputContents")
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// GetRawOutputContents indicates an expected call of GetRawOutputContents.
func (mr *MockResponseWrapperMockRecorder) GetRawOutputContents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawOutputContents", reflect.TypeOf((*MockResponseWrapper)(nil).GetRawOutputContents))
}

// GetResponse mocks base method.
func (m *MockResponseWrapper) GetResponse() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponse")
	ret0, _ := ret[0].(any)
	return ret0
}

// GetResponse indicates an expected call of GetResponse.
func (mr *MockResponseWrapperMockRecorder) GetResponse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponse", reflect.TypeOf((*MockResponseWrapper)(nil).GetResponse))
}
