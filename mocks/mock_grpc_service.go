// Code generated by MockGen. DO NOT EDIT.
// Source: client/grpc/grpc_generated_v2/grpc_service.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockisInferParameter_ParameterChoice is a mock of isInferParameter_ParameterChoice interface.
type MockisInferParameter_ParameterChoice struct {
	ctrl     *gomock.Controller
	recorder *MockisInferParameter_ParameterChoiceMockRecorder
}

// MockisInferParameter_ParameterChoiceMockRecorder is the mock recorder for MockisInferParameter_ParameterChoice.
type MockisInferParameter_ParameterChoiceMockRecorder struct {
	mock *MockisInferParameter_ParameterChoice
}

// NewMockisInferParameter_ParameterChoice creates a new mock instance.
func NewMockisInferParameter_ParameterChoice(ctrl *gomock.Controller) *MockisInferParameter_ParameterChoice {
	mock := &MockisInferParameter_ParameterChoice{ctrl: ctrl}
	mock.recorder = &MockisInferParameter_ParameterChoiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisInferParameter_ParameterChoice) EXPECT() *MockisInferParameter_ParameterChoiceMockRecorder {
	return m.recorder
}

// isInferParameter_ParameterChoice mocks base method.
func (m *MockisInferParameter_ParameterChoice) isInferParameter_ParameterChoice() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isInferParameter_ParameterChoice")
}

// isInferParameter_ParameterChoice indicates an expected call of isInferParameter_ParameterChoice.
func (mr *MockisInferParameter_ParameterChoiceMockRecorder) isInferParameter_ParameterChoice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isInferParameter_ParameterChoice", reflect.TypeOf((*MockisInferParameter_ParameterChoice)(nil).isInferParameter_ParameterChoice))
}

// MockisModelRepositoryParameter_ParameterChoice is a mock of isModelRepositoryParameter_ParameterChoice interface.
type MockisModelRepositoryParameter_ParameterChoice struct {
	ctrl     *gomock.Controller
	recorder *MockisModelRepositoryParameter_ParameterChoiceMockRecorder
}

// MockisModelRepositoryParameter_ParameterChoiceMockRecorder is the mock recorder for MockisModelRepositoryParameter_ParameterChoice.
type MockisModelRepositoryParameter_ParameterChoiceMockRecorder struct {
	mock *MockisModelRepositoryParameter_ParameterChoice
}

// NewMockisModelRepositoryParameter_ParameterChoice creates a new mock instance.
func NewMockisModelRepositoryParameter_ParameterChoice(ctrl *gomock.Controller) *MockisModelRepositoryParameter_ParameterChoice {
	mock := &MockisModelRepositoryParameter_ParameterChoice{ctrl: ctrl}
	mock.recorder = &MockisModelRepositoryParameter_ParameterChoiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisModelRepositoryParameter_ParameterChoice) EXPECT() *MockisModelRepositoryParameter_ParameterChoiceMockRecorder {
	return m.recorder
}

// isModelRepositoryParameter_ParameterChoice mocks base method.
func (m *MockisModelRepositoryParameter_ParameterChoice) isModelRepositoryParameter_ParameterChoice() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isModelRepositoryParameter_ParameterChoice")
}

// isModelRepositoryParameter_ParameterChoice indicates an expected call of isModelRepositoryParameter_ParameterChoice.
func (mr *MockisModelRepositoryParameter_ParameterChoiceMockRecorder) isModelRepositoryParameter_ParameterChoice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isModelRepositoryParameter_ParameterChoice", reflect.TypeOf((*MockisModelRepositoryParameter_ParameterChoice)(nil).isModelRepositoryParameter_ParameterChoice))
}

// MockisLogSettingsRequest_SettingValue_ParameterChoice is a mock of isLogSettingsRequest_SettingValue_ParameterChoice interface.
type MockisLogSettingsRequest_SettingValue_ParameterChoice struct {
	ctrl     *gomock.Controller
	recorder *MockisLogSettingsRequest_SettingValue_ParameterChoiceMockRecorder
}

// MockisLogSettingsRequest_SettingValue_ParameterChoiceMockRecorder is the mock recorder for MockisLogSettingsRequest_SettingValue_ParameterChoice.
type MockisLogSettingsRequest_SettingValue_ParameterChoiceMockRecorder struct {
	mock *MockisLogSettingsRequest_SettingValue_ParameterChoice
}

// NewMockisLogSettingsRequest_SettingValue_ParameterChoice creates a new mock instance.
func NewMockisLogSettingsRequest_SettingValue_ParameterChoice(ctrl *gomock.Controller) *MockisLogSettingsRequest_SettingValue_ParameterChoice {
	mock := &MockisLogSettingsRequest_SettingValue_ParameterChoice{ctrl: ctrl}
	mock.recorder = &MockisLogSettingsRequest_SettingValue_ParameterChoiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisLogSettingsRequest_SettingValue_ParameterChoice) EXPECT() *MockisLogSettingsRequest_SettingValue_ParameterChoiceMockRecorder {
	return m.recorder
}

// isLogSettingsRequest_SettingValue_ParameterChoice mocks base method.
func (m *MockisLogSettingsRequest_SettingValue_ParameterChoice) isLogSettingsRequest_SettingValue_ParameterChoice() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isLogSettingsRequest_SettingValue_ParameterChoice")
}

// isLogSettingsRequest_SettingValue_ParameterChoice indicates an expected call of isLogSettingsRequest_SettingValue_ParameterChoice.
func (mr *MockisLogSettingsRequest_SettingValue_ParameterChoiceMockRecorder) isLogSettingsRequest_SettingValue_ParameterChoice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isLogSettingsRequest_SettingValue_ParameterChoice", reflect.TypeOf((*MockisLogSettingsRequest_SettingValue_ParameterChoice)(nil).isLogSettingsRequest_SettingValue_ParameterChoice))
}

// MockisLogSettingsResponse_SettingValue_ParameterChoice is a mock of isLogSettingsResponse_SettingValue_ParameterChoice interface.
type MockisLogSettingsResponse_SettingValue_ParameterChoice struct {
	ctrl     *gomock.Controller
	recorder *MockisLogSettingsResponse_SettingValue_ParameterChoiceMockRecorder
}

// MockisLogSettingsResponse_SettingValue_ParameterChoiceMockRecorder is the mock recorder for MockisLogSettingsResponse_SettingValue_ParameterChoice.
type MockisLogSettingsResponse_SettingValue_ParameterChoiceMockRecorder struct {
	mock *MockisLogSettingsResponse_SettingValue_ParameterChoice
}

// NewMockisLogSettingsResponse_SettingValue_ParameterChoice creates a new mock instance.
func NewMockisLogSettingsResponse_SettingValue_ParameterChoice(ctrl *gomock.Controller) *MockisLogSettingsResponse_SettingValue_ParameterChoice {
	mock := &MockisLogSettingsResponse_SettingValue_ParameterChoice{ctrl: ctrl}
	mock.recorder = &MockisLogSettingsResponse_SettingValue_ParameterChoiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisLogSettingsResponse_SettingValue_ParameterChoice) EXPECT() *MockisLogSettingsResponse_SettingValue_ParameterChoiceMockRecorder {
	return m.recorder
}

// isLogSettingsResponse_SettingValue_ParameterChoice mocks base method.
func (m *MockisLogSettingsResponse_SettingValue_ParameterChoice) isLogSettingsResponse_SettingValue_ParameterChoice() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isLogSettingsResponse_SettingValue_ParameterChoice")
}

// isLogSettingsResponse_SettingValue_ParameterChoice indicates an expected call of isLogSettingsResponse_SettingValue_ParameterChoice.
func (mr *MockisLogSettingsResponse_SettingValue_ParameterChoiceMockRecorder) isLogSettingsResponse_SettingValue_ParameterChoice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isLogSettingsResponse_SettingValue_ParameterChoice", reflect.TypeOf((*MockisLogSettingsResponse_SettingValue_ParameterChoice)(nil).isLogSettingsResponse_SettingValue_ParameterChoice))
}
