// Code generated by MockGen. DO NOT EDIT.
// Source: base/infer_input.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInferInput is a mock of InferInput interface.
type MockInferInput struct {
	ctrl     *gomock.Controller
	recorder *MockInferInputMockRecorder
}

// MockInferInputMockRecorder is the mock recorder for MockInferInput.
type MockInferInputMockRecorder struct {
	mock *MockInferInput
}

// NewMockInferInput creates a new mock instance.
func NewMockInferInput(ctrl *gomock.Controller) *MockInferInput {
	mock := &MockInferInput{ctrl: ctrl}
	mock.recorder = &MockInferInputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInferInput) EXPECT() *MockInferInputMockRecorder {
	return m.recorder
}

// GetBinaryData mocks base method.
func (m *MockInferInput) GetBinaryData() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBinaryData")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetBinaryData indicates an expected call of GetBinaryData.
func (mr *MockInferInputMockRecorder) GetBinaryData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBinaryData", reflect.TypeOf((*MockInferInput)(nil).GetBinaryData))
}

// GetData mocks base method.
func (m *MockInferInput) GetData() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// GetData indicates an expected call of GetData.
func (mr *MockInferInputMockRecorder) GetData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockInferInput)(nil).GetData))
}

// GetDatatype mocks base method.
func (m *MockInferInput) GetDatatype() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatatype")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDatatype indicates an expected call of GetDatatype.
func (mr *MockInferInputMockRecorder) GetDatatype() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatatype", reflect.TypeOf((*MockInferInput)(nil).GetDatatype))
}

// GetName mocks base method.
func (m *MockInferInput) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockInferInputMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockInferInput)(nil).GetName))
}

// GetParameters mocks base method.
func (m *MockInferInput) GetParameters() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParameters")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetParameters indicates an expected call of GetParameters.
func (mr *MockInferInputMockRecorder) GetParameters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParameters", reflect.TypeOf((*MockInferInput)(nil).GetParameters))
}

// GetRawData mocks base method.
func (m *MockInferInput) GetRawData() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawData")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetRawData indicates an expected call of GetRawData.
func (mr *MockInferInputMockRecorder) GetRawData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawData", reflect.TypeOf((*MockInferInput)(nil).GetRawData))
}

// GetShape mocks base method.
func (m *MockInferInput) GetShape() []int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShape")
	ret0, _ := ret[0].([]int64)
	return ret0
}

// GetShape indicates an expected call of GetShape.
func (mr *MockInferInputMockRecorder) GetShape() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShape", reflect.TypeOf((*MockInferInput)(nil).GetShape))
}

// GetTensor mocks base method.
func (m *MockInferInput) GetTensor() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTensor")
	ret0, _ := ret[0].(any)
	return ret0
}

// GetTensor indicates an expected call of GetTensor.
func (mr *MockInferInputMockRecorder) GetTensor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTensor", reflect.TypeOf((*MockInferInput)(nil).GetTensor))
}

// SetData mocks base method.
func (m *MockInferInput) SetData(inputTensor interface{}, binaryData bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetData", inputTensor, binaryData)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetData indicates an expected call of SetData.
func (mr *MockInferInputMockRecorder) SetData(inputTensor, binaryData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetData", reflect.TypeOf((*MockInferInput)(nil).SetData), inputTensor, binaryData)
}

// SetDatatype mocks base method.
func (m *MockInferInput) SetDatatype(datatype string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDatatype", datatype)
}

// SetDatatype indicates an expected call of SetDatatype.
func (mr *MockInferInputMockRecorder) SetDatatype(datatype interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDatatype", reflect.TypeOf((*MockInferInput)(nil).SetDatatype), datatype)
}

// SetShape mocks base method.
func (m *MockInferInput) SetShape(shape []int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetShape", shape)
}

// SetShape indicates an expected call of SetShape.
func (mr *MockInferInputMockRecorder) SetShape(shape interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetShape", reflect.TypeOf((*MockInferInput)(nil).SetShape), shape)
}
