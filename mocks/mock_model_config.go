// Code generated by MockGen. DO NOT EDIT.
// Source: client/grpc/grpc_generated_v2/model_config.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockisModelVersionPolicy_PolicyChoice is a mock of isModelVersionPolicy_PolicyChoice interface.
type MockisModelVersionPolicy_PolicyChoice struct {
	ctrl     *gomock.Controller
	recorder *MockisModelVersionPolicy_PolicyChoiceMockRecorder
}

// MockisModelVersionPolicy_PolicyChoiceMockRecorder is the mock recorder for MockisModelVersionPolicy_PolicyChoice.
type MockisModelVersionPolicy_PolicyChoiceMockRecorder struct {
	mock *MockisModelVersionPolicy_PolicyChoice
}

// NewMockisModelVersionPolicy_PolicyChoice creates a new mock instance.
func NewMockisModelVersionPolicy_PolicyChoice(ctrl *gomock.Controller) *MockisModelVersionPolicy_PolicyChoice {
	mock := &MockisModelVersionPolicy_PolicyChoice{ctrl: ctrl}
	mock.recorder = &MockisModelVersionPolicy_PolicyChoiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisModelVersionPolicy_PolicyChoice) EXPECT() *MockisModelVersionPolicy_PolicyChoiceMockRecorder {
	return m.recorder
}

// isModelVersionPolicy_PolicyChoice mocks base method.
func (m *MockisModelVersionPolicy_PolicyChoice) isModelVersionPolicy_PolicyChoice() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isModelVersionPolicy_PolicyChoice")
}

// isModelVersionPolicy_PolicyChoice indicates an expected call of isModelVersionPolicy_PolicyChoice.
func (mr *MockisModelVersionPolicy_PolicyChoiceMockRecorder) isModelVersionPolicy_PolicyChoice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isModelVersionPolicy_PolicyChoice", reflect.TypeOf((*MockisModelVersionPolicy_PolicyChoice)(nil).isModelVersionPolicy_PolicyChoice))
}

// MockisModelSequenceBatching_StrategyChoice is a mock of isModelSequenceBatching_StrategyChoice interface.
type MockisModelSequenceBatching_StrategyChoice struct {
	ctrl     *gomock.Controller
	recorder *MockisModelSequenceBatching_StrategyChoiceMockRecorder
}

// MockisModelSequenceBatching_StrategyChoiceMockRecorder is the mock recorder for MockisModelSequenceBatching_StrategyChoice.
type MockisModelSequenceBatching_StrategyChoiceMockRecorder struct {
	mock *MockisModelSequenceBatching_StrategyChoice
}

// NewMockisModelSequenceBatching_StrategyChoice creates a new mock instance.
func NewMockisModelSequenceBatching_StrategyChoice(ctrl *gomock.Controller) *MockisModelSequenceBatching_StrategyChoice {
	mock := &MockisModelSequenceBatching_StrategyChoice{ctrl: ctrl}
	mock.recorder = &MockisModelSequenceBatching_StrategyChoiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisModelSequenceBatching_StrategyChoice) EXPECT() *MockisModelSequenceBatching_StrategyChoiceMockRecorder {
	return m.recorder
}

// isModelSequenceBatching_StrategyChoice mocks base method.
func (m *MockisModelSequenceBatching_StrategyChoice) isModelSequenceBatching_StrategyChoice() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isModelSequenceBatching_StrategyChoice")
}

// isModelSequenceBatching_StrategyChoice indicates an expected call of isModelSequenceBatching_StrategyChoice.
func (mr *MockisModelSequenceBatching_StrategyChoiceMockRecorder) isModelSequenceBatching_StrategyChoice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isModelSequenceBatching_StrategyChoice", reflect.TypeOf((*MockisModelSequenceBatching_StrategyChoice)(nil).isModelSequenceBatching_StrategyChoice))
}

// MockisModelConfig_SchedulingChoice is a mock of isModelConfig_SchedulingChoice interface.
type MockisModelConfig_SchedulingChoice struct {
	ctrl     *gomock.Controller
	recorder *MockisModelConfig_SchedulingChoiceMockRecorder
}

// MockisModelConfig_SchedulingChoiceMockRecorder is the mock recorder for MockisModelConfig_SchedulingChoice.
type MockisModelConfig_SchedulingChoiceMockRecorder struct {
	mock *MockisModelConfig_SchedulingChoice
}

// NewMockisModelConfig_SchedulingChoice creates a new mock instance.
func NewMockisModelConfig_SchedulingChoice(ctrl *gomock.Controller) *MockisModelConfig_SchedulingChoice {
	mock := &MockisModelConfig_SchedulingChoice{ctrl: ctrl}
	mock.recorder = &MockisModelConfig_SchedulingChoiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisModelConfig_SchedulingChoice) EXPECT() *MockisModelConfig_SchedulingChoiceMockRecorder {
	return m.recorder
}

// isModelConfig_SchedulingChoice mocks base method.
func (m *MockisModelConfig_SchedulingChoice) isModelConfig_SchedulingChoice() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isModelConfig_SchedulingChoice")
}

// isModelConfig_SchedulingChoice indicates an expected call of isModelConfig_SchedulingChoice.
func (mr *MockisModelConfig_SchedulingChoiceMockRecorder) isModelConfig_SchedulingChoice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isModelConfig_SchedulingChoice", reflect.TypeOf((*MockisModelConfig_SchedulingChoice)(nil).isModelConfig_SchedulingChoice))
}

// MockisModelSequenceBatching_InitialState_StateData is a mock of isModelSequenceBatching_InitialState_StateData interface.
type MockisModelSequenceBatching_InitialState_StateData struct {
	ctrl     *gomock.Controller
	recorder *MockisModelSequenceBatching_InitialState_StateDataMockRecorder
}

// MockisModelSequenceBatching_InitialState_StateDataMockRecorder is the mock recorder for MockisModelSequenceBatching_InitialState_StateData.
type MockisModelSequenceBatching_InitialState_StateDataMockRecorder struct {
	mock *MockisModelSequenceBatching_InitialState_StateData
}

// NewMockisModelSequenceBatching_InitialState_StateData creates a new mock instance.
func NewMockisModelSequenceBatching_InitialState_StateData(ctrl *gomock.Controller) *MockisModelSequenceBatching_InitialState_StateData {
	mock := &MockisModelSequenceBatching_InitialState_StateData{ctrl: ctrl}
	mock.recorder = &MockisModelSequenceBatching_InitialState_StateDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisModelSequenceBatching_InitialState_StateData) EXPECT() *MockisModelSequenceBatching_InitialState_StateDataMockRecorder {
	return m.recorder
}

// isModelSequenceBatching_InitialState_StateData mocks base method.
func (m *MockisModelSequenceBatching_InitialState_StateData) isModelSequenceBatching_InitialState_StateData() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isModelSequenceBatching_InitialState_StateData")
}

// isModelSequenceBatching_InitialState_StateData indicates an expected call of isModelSequenceBatching_InitialState_StateData.
func (mr *MockisModelSequenceBatching_InitialState_StateDataMockRecorder) isModelSequenceBatching_InitialState_StateData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isModelSequenceBatching_InitialState_StateData", reflect.TypeOf((*MockisModelSequenceBatching_InitialState_StateData)(nil).isModelSequenceBatching_InitialState_StateData))
}

// MockisModelWarmup_Input_InputDataType is a mock of isModelWarmup_Input_InputDataType interface.
type MockisModelWarmup_Input_InputDataType struct {
	ctrl     *gomock.Controller
	recorder *MockisModelWarmup_Input_InputDataTypeMockRecorder
}

// MockisModelWarmup_Input_InputDataTypeMockRecorder is the mock recorder for MockisModelWarmup_Input_InputDataType.
type MockisModelWarmup_Input_InputDataTypeMockRecorder struct {
	mock *MockisModelWarmup_Input_InputDataType
}

// NewMockisModelWarmup_Input_InputDataType creates a new mock instance.
func NewMockisModelWarmup_Input_InputDataType(ctrl *gomock.Controller) *MockisModelWarmup_Input_InputDataType {
	mock := &MockisModelWarmup_Input_InputDataType{ctrl: ctrl}
	mock.recorder = &MockisModelWarmup_Input_InputDataTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisModelWarmup_Input_InputDataType) EXPECT() *MockisModelWarmup_Input_InputDataTypeMockRecorder {
	return m.recorder
}

// isModelWarmup_Input_InputDataType mocks base method.
func (m *MockisModelWarmup_Input_InputDataType) isModelWarmup_Input_InputDataType() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isModelWarmup_Input_InputDataType")
}

// isModelWarmup_Input_InputDataType indicates an expected call of isModelWarmup_Input_InputDataType.
func (mr *MockisModelWarmup_Input_InputDataTypeMockRecorder) isModelWarmup_Input_InputDataType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isModelWarmup_Input_InputDataType", reflect.TypeOf((*MockisModelWarmup_Input_InputDataType)(nil).isModelWarmup_Input_InputDataType))
}
