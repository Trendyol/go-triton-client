// Code generated by MockGen. DO NOT EDIT.
// Source: base/infer_output.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInferOutput is a mock of InferOutput interface.
type MockInferOutput struct {
	ctrl     *gomock.Controller
	recorder *MockInferOutputMockRecorder
}

// MockInferOutputMockRecorder is the mock recorder for MockInferOutput.
type MockInferOutputMockRecorder struct {
	mock *MockInferOutput
}

// NewMockInferOutput creates a new mock instance.
func NewMockInferOutput(ctrl *gomock.Controller) *MockInferOutput {
	mock := &MockInferOutput{ctrl: ctrl}
	mock.recorder = &MockInferOutputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInferOutput) EXPECT() *MockInferOutputMockRecorder {
	return m.recorder
}

// GetData mocks base method.
func (m *MockInferOutput) GetData() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// GetData indicates an expected call of GetData.
func (mr *MockInferOutputMockRecorder) GetData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockInferOutput)(nil).GetData))
}

// GetDatatype mocks base method.
func (m *MockInferOutput) GetDatatype() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatatype")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDatatype indicates an expected call of GetDatatype.
func (mr *MockInferOutputMockRecorder) GetDatatype() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatatype", reflect.TypeOf((*MockInferOutput)(nil).GetDatatype))
}

// GetName mocks base method.
func (m *MockInferOutput) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockInferOutputMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockInferOutput)(nil).GetName))
}

// GetParameters mocks base method.
func (m *MockInferOutput) GetParameters() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParameters")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetParameters indicates an expected call of GetParameters.
func (mr *MockInferOutputMockRecorder) GetParameters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParameters", reflect.TypeOf((*MockInferOutput)(nil).GetParameters))
}

// GetShape mocks base method.
func (m *MockInferOutput) GetShape() []int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShape")
	ret0, _ := ret[0].([]int)
	return ret0
}

// GetShape indicates an expected call of GetShape.
func (mr *MockInferOutputMockRecorder) GetShape() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShape", reflect.TypeOf((*MockInferOutput)(nil).GetShape))
}

// GetTensor mocks base method.
func (m *MockInferOutput) GetTensor() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTensor")
	ret0, _ := ret[0].(any)
	return ret0
}

// GetTensor indicates an expected call of GetTensor.
func (mr *MockInferOutputMockRecorder) GetTensor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTensor", reflect.TypeOf((*MockInferOutput)(nil).GetTensor))
}
