// Code generated by MockGen. DO NOT EDIT.
// Source: base/client.go
//
// Generated by this command:
//
//	mockgen -source=base/client.go -destination=base/mock_client.go -package=base
//

// Package base is a generated GoMock package.
package base

import (
	context "context"
	reflect "reflect"

	models "github.com/Trendyol/go-triton-client/models"
	options "github.com/Trendyol/go-triton-client/options"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetCUDASharedMemoryStatus mocks base method.
func (m *MockClient) GetCUDASharedMemoryStatus(ctx context.Context, regionName string, options *options.Options) ([]models.CUDASharedMemoryStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCUDASharedMemoryStatus", ctx, regionName, options)
	ret0, _ := ret[0].([]models.CUDASharedMemoryStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCUDASharedMemoryStatus indicates an expected call of GetCUDASharedMemoryStatus.
func (mr *MockClientMockRecorder) GetCUDASharedMemoryStatus(ctx, regionName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCUDASharedMemoryStatus", reflect.TypeOf((*MockClient)(nil).GetCUDASharedMemoryStatus), ctx, regionName, options)
}

// GetInferenceStatistics mocks base method.
func (m *MockClient) GetInferenceStatistics(ctx context.Context, modelName, modelVersion string, options *options.Options) (*models.InferenceStatisticsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInferenceStatistics", ctx, modelName, modelVersion, options)
	ret0, _ := ret[0].(*models.InferenceStatisticsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInferenceStatistics indicates an expected call of GetInferenceStatistics.
func (mr *MockClientMockRecorder) GetInferenceStatistics(ctx, modelName, modelVersion, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInferenceStatistics", reflect.TypeOf((*MockClient)(nil).GetInferenceStatistics), ctx, modelName, modelVersion, options)
}

// GetLogSettings mocks base method.
func (m *MockClient) GetLogSettings(ctx context.Context, options *options.Options) (*models.LogSettingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogSettings", ctx, options)
	ret0, _ := ret[0].(*models.LogSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogSettings indicates an expected call of GetLogSettings.
func (mr *MockClientMockRecorder) GetLogSettings(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogSettings", reflect.TypeOf((*MockClient)(nil).GetLogSettings), ctx, options)
}

// GetModelConfig mocks base method.
func (m *MockClient) GetModelConfig(ctx context.Context, modelName, modelVersion string, options *options.Options) (*models.ModelConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelConfig", ctx, modelName, modelVersion, options)
	ret0, _ := ret[0].(*models.ModelConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelConfig indicates an expected call of GetModelConfig.
func (mr *MockClientMockRecorder) GetModelConfig(ctx, modelName, modelVersion, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelConfig", reflect.TypeOf((*MockClient)(nil).GetModelConfig), ctx, modelName, modelVersion, options)
}

// GetModelMetadata mocks base method.
func (m *MockClient) GetModelMetadata(ctx context.Context, modelName, modelVersion string, options *options.Options) (*models.ModelMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelMetadata", ctx, modelName, modelVersion, options)
	ret0, _ := ret[0].(*models.ModelMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelMetadata indicates an expected call of GetModelMetadata.
func (mr *MockClientMockRecorder) GetModelMetadata(ctx, modelName, modelVersion, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelMetadata", reflect.TypeOf((*MockClient)(nil).GetModelMetadata), ctx, modelName, modelVersion, options)
}

// GetModelRepositoryIndex mocks base method.
func (m *MockClient) GetModelRepositoryIndex(ctx context.Context, options *options.Options) ([]models.ModelRepositoryIndexResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelRepositoryIndex", ctx, options)
	ret0, _ := ret[0].([]models.ModelRepositoryIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelRepositoryIndex indicates an expected call of GetModelRepositoryIndex.
func (mr *MockClientMockRecorder) GetModelRepositoryIndex(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelRepositoryIndex", reflect.TypeOf((*MockClient)(nil).GetModelRepositoryIndex), ctx, options)
}

// GetServerMetadata mocks base method.
func (m *MockClient) GetServerMetadata(ctx context.Context, options *options.Options) (*models.ServerMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerMetadata", ctx, options)
	ret0, _ := ret[0].(*models.ServerMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerMetadata indicates an expected call of GetServerMetadata.
func (mr *MockClientMockRecorder) GetServerMetadata(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerMetadata", reflect.TypeOf((*MockClient)(nil).GetServerMetadata), ctx, options)
}

// GetSystemSharedMemoryStatus mocks base method.
func (m *MockClient) GetSystemSharedMemoryStatus(ctx context.Context, regionName string, options *options.Options) ([]models.SystemSharedMemoryStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemSharedMemoryStatus", ctx, regionName, options)
	ret0, _ := ret[0].([]models.SystemSharedMemoryStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemSharedMemoryStatus indicates an expected call of GetSystemSharedMemoryStatus.
func (mr *MockClientMockRecorder) GetSystemSharedMemoryStatus(ctx, regionName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemSharedMemoryStatus", reflect.TypeOf((*MockClient)(nil).GetSystemSharedMemoryStatus), ctx, regionName, options)
}

// GetTraceSettings mocks base method.
func (m *MockClient) GetTraceSettings(ctx context.Context, modelName string, options *options.Options) (*models.TraceSettingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceSettings", ctx, modelName, options)
	ret0, _ := ret[0].(*models.TraceSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraceSettings indicates an expected call of GetTraceSettings.
func (mr *MockClientMockRecorder) GetTraceSettings(ctx, modelName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceSettings", reflect.TypeOf((*MockClient)(nil).GetTraceSettings), ctx, modelName, options)
}

// Infer mocks base method.
func (m *MockClient) Infer(ctx context.Context, modelName, modelVersion string, inputs []InferInput, outputs []InferOutput, options *options.InferOptions) (InferResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Infer", ctx, modelName, modelVersion, inputs, outputs, options)
	ret0, _ := ret[0].(InferResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Infer indicates an expected call of Infer.
func (mr *MockClientMockRecorder) Infer(ctx, modelName, modelVersion, inputs, outputs, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infer", reflect.TypeOf((*MockClient)(nil).Infer), ctx, modelName, modelVersion, inputs, outputs, options)
}

// IsModelReady mocks base method.
func (m *MockClient) IsModelReady(ctx context.Context, modelName, modelVersion string, options *options.Options) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsModelReady", ctx, modelName, modelVersion, options)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsModelReady indicates an expected call of IsModelReady.
func (mr *MockClientMockRecorder) IsModelReady(ctx, modelName, modelVersion, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsModelReady", reflect.TypeOf((*MockClient)(nil).IsModelReady), ctx, modelName, modelVersion, options)
}

// IsServerLive mocks base method.
func (m *MockClient) IsServerLive(ctx context.Context, options *options.Options) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsServerLive", ctx, options)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsServerLive indicates an expected call of IsServerLive.
func (mr *MockClientMockRecorder) IsServerLive(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsServerLive", reflect.TypeOf((*MockClient)(nil).IsServerLive), ctx, options)
}

// IsServerReady mocks base method.
func (m *MockClient) IsServerReady(ctx context.Context, options *options.Options) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsServerReady", ctx, options)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsServerReady indicates an expected call of IsServerReady.
func (mr *MockClientMockRecorder) IsServerReady(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsServerReady", reflect.TypeOf((*MockClient)(nil).IsServerReady), ctx, options)
}

// LoadModel mocks base method.
func (m *MockClient) LoadModel(ctx context.Context, modelName, config string, files map[string][]byte, options *options.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadModel", ctx, modelName, config, files, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadModel indicates an expected call of LoadModel.
func (mr *MockClientMockRecorder) LoadModel(ctx, modelName, config, files, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadModel", reflect.TypeOf((*MockClient)(nil).LoadModel), ctx, modelName, config, files, options)
}

// RegisterCUDASharedMemory mocks base method.
func (m *MockClient) RegisterCUDASharedMemory(ctx context.Context, name string, rawHandle []byte, deviceID, byteSize int, options *options.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCUDASharedMemory", ctx, name, rawHandle, deviceID, byteSize, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterCUDASharedMemory indicates an expected call of RegisterCUDASharedMemory.
func (mr *MockClientMockRecorder) RegisterCUDASharedMemory(ctx, name, rawHandle, deviceID, byteSize, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCUDASharedMemory", reflect.TypeOf((*MockClient)(nil).RegisterCUDASharedMemory), ctx, name, rawHandle, deviceID, byteSize, options)
}

// RegisterSystemSharedMemory mocks base method.
func (m *MockClient) RegisterSystemSharedMemory(ctx context.Context, name, key string, byteSize, offset int, options *options.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSystemSharedMemory", ctx, name, key, byteSize, offset, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterSystemSharedMemory indicates an expected call of RegisterSystemSharedMemory.
func (mr *MockClientMockRecorder) RegisterSystemSharedMemory(ctx, name, key, byteSize, offset, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSystemSharedMemory", reflect.TypeOf((*MockClient)(nil).RegisterSystemSharedMemory), ctx, name, key, byteSize, offset, options)
}

// UnloadModel mocks base method.
func (m *MockClient) UnloadModel(ctx context.Context, modelName string, unloadDependents bool, options *options.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnloadModel", ctx, modelName, unloadDependents, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnloadModel indicates an expected call of UnloadModel.
func (mr *MockClientMockRecorder) UnloadModel(ctx, modelName, unloadDependents, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnloadModel", reflect.TypeOf((*MockClient)(nil).UnloadModel), ctx, modelName, unloadDependents, options)
}

// UnregisterCUDASharedMemory mocks base method.
func (m *MockClient) UnregisterCUDASharedMemory(ctx context.Context, name string, options *options.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterCUDASharedMemory", ctx, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterCUDASharedMemory indicates an expected call of UnregisterCUDASharedMemory.
func (mr *MockClientMockRecorder) UnregisterCUDASharedMemory(ctx, name, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterCUDASharedMemory", reflect.TypeOf((*MockClient)(nil).UnregisterCUDASharedMemory), ctx, name, options)
}

// UnregisterSystemSharedMemory mocks base method.
func (m *MockClient) UnregisterSystemSharedMemory(ctx context.Context, name string, options *options.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterSystemSharedMemory", ctx, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterSystemSharedMemory indicates an expected call of UnregisterSystemSharedMemory.
func (mr *MockClientMockRecorder) UnregisterSystemSharedMemory(ctx, name, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterSystemSharedMemory", reflect.TypeOf((*MockClient)(nil).UnregisterSystemSharedMemory), ctx, name, options)
}

// UpdateLogSettings mocks base method.
func (m *MockClient) UpdateLogSettings(ctx context.Context, request models.LogSettingsRequest, options *options.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLogSettings", ctx, request, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLogSettings indicates an expected call of UpdateLogSettings.
func (mr *MockClientMockRecorder) UpdateLogSettings(ctx, request, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLogSettings", reflect.TypeOf((*MockClient)(nil).UpdateLogSettings), ctx, request, options)
}
