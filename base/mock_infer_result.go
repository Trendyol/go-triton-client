// Code generated by MockGen. DO NOT EDIT.
// Source: base/infer_result.go
//
// Generated by this command:
//
//	mockgen -source=base/infer_result.go -destination=base/mock_infer_result.go -package=base
//

// Package base is a generated GoMock package.
package base

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInferResult is a mock of InferResult interface.
type MockInferResult struct {
	ctrl     *gomock.Controller
	recorder *MockInferResultMockRecorder
	isgomock struct{}
}

// MockInferResultMockRecorder is the mock recorder for MockInferResult.
type MockInferResultMockRecorder struct {
	mock *MockInferResult
}

// NewMockInferResult creates a new mock instance.
func NewMockInferResult(ctrl *gomock.Controller) *MockInferResult {
	mock := &MockInferResult{ctrl: ctrl}
	mock.recorder = &MockInferResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInferResult) EXPECT() *MockInferResultMockRecorder {
	return m.recorder
}

// AsBoolSlice mocks base method.
func (m *MockInferResult) AsBoolSlice(name string) ([]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsBoolSlice", name)
	ret0, _ := ret[0].([]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AsBoolSlice indicates an expected call of AsBoolSlice.
func (mr *MockInferResultMockRecorder) AsBoolSlice(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsBoolSlice", reflect.TypeOf((*MockInferResult)(nil).AsBoolSlice), name)
}

// AsByteSlice mocks base method.
func (m *MockInferResult) AsByteSlice(name string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsByteSlice", name)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AsByteSlice indicates an expected call of AsByteSlice.
func (mr *MockInferResultMockRecorder) AsByteSlice(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsByteSlice", reflect.TypeOf((*MockInferResult)(nil).AsByteSlice), name)
}

// AsFloat16Slice mocks base method.
func (m *MockInferResult) AsFloat16Slice(name string) ([]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsFloat16Slice", name)
	ret0, _ := ret[0].([]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AsFloat16Slice indicates an expected call of AsFloat16Slice.
func (mr *MockInferResultMockRecorder) AsFloat16Slice(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsFloat16Slice", reflect.TypeOf((*MockInferResult)(nil).AsFloat16Slice), name)
}

// AsFloat32Slice mocks base method.
func (m *MockInferResult) AsFloat32Slice(name string) ([]float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsFloat32Slice", name)
	ret0, _ := ret[0].([]float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AsFloat32Slice indicates an expected call of AsFloat32Slice.
func (mr *MockInferResultMockRecorder) AsFloat32Slice(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsFloat32Slice", reflect.TypeOf((*MockInferResult)(nil).AsFloat32Slice), name)
}

// AsFloat64Slice mocks base method.
func (m *MockInferResult) AsFloat64Slice(name string) ([]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsFloat64Slice", name)
	ret0, _ := ret[0].([]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AsFloat64Slice indicates an expected call of AsFloat64Slice.
func (mr *MockInferResultMockRecorder) AsFloat64Slice(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsFloat64Slice", reflect.TypeOf((*MockInferResult)(nil).AsFloat64Slice), name)
}

// AsInt16Slice mocks base method.
func (m *MockInferResult) AsInt16Slice(name string) ([]int16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsInt16Slice", name)
	ret0, _ := ret[0].([]int16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AsInt16Slice indicates an expected call of AsInt16Slice.
func (mr *MockInferResultMockRecorder) AsInt16Slice(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsInt16Slice", reflect.TypeOf((*MockInferResult)(nil).AsInt16Slice), name)
}

// AsInt32Slice mocks base method.
func (m *MockInferResult) AsInt32Slice(name string) ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsInt32Slice", name)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AsInt32Slice indicates an expected call of AsInt32Slice.
func (mr *MockInferResultMockRecorder) AsInt32Slice(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsInt32Slice", reflect.TypeOf((*MockInferResult)(nil).AsInt32Slice), name)
}

// AsInt64Slice mocks base method.
func (m *MockInferResult) AsInt64Slice(name string) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsInt64Slice", name)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AsInt64Slice indicates an expected call of AsInt64Slice.
func (mr *MockInferResultMockRecorder) AsInt64Slice(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsInt64Slice", reflect.TypeOf((*MockInferResult)(nil).AsInt64Slice), name)
}

// AsInt8Slice mocks base method.
func (m *MockInferResult) AsInt8Slice(name string) ([]int8, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsInt8Slice", name)
	ret0, _ := ret[0].([]int8)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AsInt8Slice indicates an expected call of AsInt8Slice.
func (mr *MockInferResultMockRecorder) AsInt8Slice(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsInt8Slice", reflect.TypeOf((*MockInferResult)(nil).AsInt8Slice), name)
}

// AsUint16Slice mocks base method.
func (m *MockInferResult) AsUint16Slice(name string) ([]uint16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsUint16Slice", name)
	ret0, _ := ret[0].([]uint16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AsUint16Slice indicates an expected call of AsUint16Slice.
func (mr *MockInferResultMockRecorder) AsUint16Slice(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsUint16Slice", reflect.TypeOf((*MockInferResult)(nil).AsUint16Slice), name)
}

// AsUint32Slice mocks base method.
func (m *MockInferResult) AsUint32Slice(name string) ([]uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsUint32Slice", name)
	ret0, _ := ret[0].([]uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AsUint32Slice indicates an expected call of AsUint32Slice.
func (mr *MockInferResultMockRecorder) AsUint32Slice(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsUint32Slice", reflect.TypeOf((*MockInferResult)(nil).AsUint32Slice), name)
}

// AsUint64Slice mocks base method.
func (m *MockInferResult) AsUint64Slice(name string) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsUint64Slice", name)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AsUint64Slice indicates an expected call of AsUint64Slice.
func (mr *MockInferResultMockRecorder) AsUint64Slice(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsUint64Slice", reflect.TypeOf((*MockInferResult)(nil).AsUint64Slice), name)
}

// AsUint8Slice mocks base method.
func (m *MockInferResult) AsUint8Slice(name string) ([]uint8, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsUint8Slice", name)
	ret0, _ := ret[0].([]uint8)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AsUint8Slice indicates an expected call of AsUint8Slice.
func (mr *MockInferResultMockRecorder) AsUint8Slice(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsUint8Slice", reflect.TypeOf((*MockInferResult)(nil).AsUint8Slice), name)
}

// GetOutput mocks base method.
func (m *MockInferResult) GetOutput(name string) (InferOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutput", name)
	ret0, _ := ret[0].(InferOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutput indicates an expected call of GetOutput.
func (mr *MockInferResultMockRecorder) GetOutput(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutput", reflect.TypeOf((*MockInferResult)(nil).GetOutput), name)
}

// GetShape mocks base method.
func (m *MockInferResult) GetShape(name string) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShape", name)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShape indicates an expected call of GetShape.
func (mr *MockInferResultMockRecorder) GetShape(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShape", reflect.TypeOf((*MockInferResult)(nil).GetShape), name)
}
